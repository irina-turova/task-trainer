package apache.cayenne.mappings.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import apache.cayenne.mappings.Task;
import apache.cayenne.mappings.User;

/**
 * Class _Solution was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Solution extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String SOLUTION_ID_PK_COLUMN = "solution_id";

    public static final Property<String> ACTUAL_ANSWER = Property.create("actualAnswer", String.class);
    public static final Property<LocalDateTime> SOLUTION_DATE_TIME = Property.create("solutionDateTime", LocalDateTime.class);
    public static final Property<Task> TASK = Property.create("task", Task.class);
    public static final Property<User> USER1 = Property.create("user1", User.class);

    protected String actualAnswer;
    protected LocalDateTime solutionDateTime;

    protected Object task;
    protected Object user1;

    public void setActualAnswer(String actualAnswer) {
        beforePropertyWrite("actualAnswer", this.actualAnswer, actualAnswer);
        this.actualAnswer = actualAnswer;
    }

    public String getActualAnswer() {
        beforePropertyRead("actualAnswer");
        return this.actualAnswer;
    }

    public void setSolutionDateTime(LocalDateTime solutionDateTime) {
        beforePropertyWrite("solutionDateTime", this.solutionDateTime, solutionDateTime);
        this.solutionDateTime = solutionDateTime;
    }

    public LocalDateTime getSolutionDateTime() {
        beforePropertyRead("solutionDateTime");
        return this.solutionDateTime;
    }

    public void setTask(Task task) {
        setToOneTarget("task", task, true);
    }

    public Task getTask() {
        return (Task)readProperty("task");
    }

    public void setUser1(User user1) {
        setToOneTarget("user1", user1, true);
    }

    public User getUser1() {
        return (User)readProperty("user1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "actualAnswer":
                return this.actualAnswer;
            case "solutionDateTime":
                return this.solutionDateTime;
            case "task":
                return this.task;
            case "user1":
                return this.user1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "actualAnswer":
                this.actualAnswer = (String)val;
                break;
            case "solutionDateTime":
                this.solutionDateTime = (LocalDateTime)val;
                break;
            case "task":
                this.task = val;
                break;
            case "user1":
                this.user1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.actualAnswer);
        out.writeObject(this.solutionDateTime);
        out.writeObject(this.task);
        out.writeObject(this.user1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.actualAnswer = (String)in.readObject();
        this.solutionDateTime = (LocalDateTime)in.readObject();
        this.task = in.readObject();
        this.user1 = in.readObject();
    }

}
