package apache.cayenne.mappings.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import apache.cayenne.mappings.Difficulty;
import apache.cayenne.mappings.Image;
import apache.cayenne.mappings.Solution;
import apache.cayenne.mappings.Subtheme;
import apache.cayenne.mappings.User;

/**
 * Class _Task was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Task extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NAME_PROPERTY = "name";
    public static final String TEXT_PROPERTY = "text";
    public static final String RIGHT_ANSWER_PROPERTY = "rightAnswer";
    public static final String EXPLANATION_PROPERTY = "explanation";
    public static final String SOLUTIONS_PROPERTY = "solutions";
    public static final String IMAGE_PROPERTY = "image";
    public static final String IMAGE1_PROPERTY = "image1";
    public static final String DIFFICULTY_PROPERTY = "difficulty";
    public static final String USER_PROPERTY = "user";
    public static final String SUBTHEME1_PROPERTY = "subtheme1";

    public static final String TASK_ID_PK_COLUMN = "task_id";

    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> TEXT = Property.create("text", String.class);
    public static final Property<String> RIGHT_ANSWER = Property.create("rightAnswer", String.class);
    public static final Property<String> EXPLANATION = Property.create("explanation", String.class);
    public static final Property<List<Solution>> SOLUTIONS = Property.create("solutions", List.class);
    public static final Property<Image> IMAGE = Property.create("image", Image.class);
    public static final Property<Image> IMAGE1 = Property.create("image1", Image.class);
    public static final Property<Difficulty> DIFFICULTY = Property.create("difficulty", Difficulty.class);
    public static final Property<User> USER = Property.create("user", User.class);
    public static final Property<Subtheme> SUBTHEME1 = Property.create("subtheme1", Subtheme.class);

    protected String name;
    protected String text;
    protected String rightAnswer;
    protected String explanation;

    protected Object solutions;
    protected Object image;
    protected Object image1;
    protected Object difficulty;
    protected Object user;
    protected Object subtheme1;

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setText(String text) {
        beforePropertyWrite("text", this.text, text);
        this.text = text;
    }

    public String getText() {
        beforePropertyRead("text");
        return this.text;
    }

    public void setRightAnswer(String rightAnswer) {
        beforePropertyWrite("rightAnswer", this.rightAnswer, rightAnswer);
        this.rightAnswer = rightAnswer;
    }

    public String getRightAnswer() {
        beforePropertyRead("rightAnswer");
        return this.rightAnswer;
    }

    public void setExplanation(String explanation) {
        beforePropertyWrite("explanation", this.explanation, explanation);
        this.explanation = explanation;
    }

    public String getExplanation() {
        beforePropertyRead("explanation");
        return this.explanation;
    }

    public void addToSolutions(Solution obj) {
        addToManyTarget("solutions", obj, true);
    }

    public void removeFromSolutions(Solution obj) {
        removeToManyTarget("solutions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Solution> getSolutions() {
        return (List<Solution>)readProperty("solutions");
    }

    public void setImage(Image image) {
        setToOneTarget("image", image, true);
    }

    public Image getImage() {
        return (Image)readProperty("image");
    }

    public void setImage1(Image image1) {
        setToOneTarget("image1", image1, true);
    }

    public Image getImage1() {
        return (Image)readProperty("image1");
    }

    public void setDifficulty(Difficulty difficulty) {
        setToOneTarget("difficulty", difficulty, true);
    }

    public Difficulty getDifficulty() {
        return (Difficulty)readProperty("difficulty");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    public void setSubtheme1(Subtheme subtheme1) {
        setToOneTarget("subtheme1", subtheme1, true);
    }

    public Subtheme getSubtheme1() {
        return (Subtheme)readProperty("subtheme1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "name":
                return this.name;
            case "text":
                return this.text;
            case "rightAnswer":
                return this.rightAnswer;
            case "explanation":
                return this.explanation;
            case "solutions":
                return this.solutions;
            case "image":
                return this.image;
            case "image1":
                return this.image1;
            case "difficulty":
                return this.difficulty;
            case "user":
                return this.user;
            case "subtheme1":
                return this.subtheme1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "name":
                this.name = (String)val;
                break;
            case "text":
                this.text = (String)val;
                break;
            case "rightAnswer":
                this.rightAnswer = (String)val;
                break;
            case "explanation":
                this.explanation = (String)val;
                break;
            case "solutions":
                this.solutions = val;
                break;
            case "image":
                this.image = val;
                break;
            case "image1":
                this.image1 = val;
                break;
            case "difficulty":
                this.difficulty = val;
                break;
            case "user":
                this.user = val;
                break;
            case "subtheme1":
                this.subtheme1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.name);
        out.writeObject(this.text);
        out.writeObject(this.rightAnswer);
        out.writeObject(this.explanation);
        out.writeObject(this.solutions);
        out.writeObject(this.image);
        out.writeObject(this.image1);
        out.writeObject(this.difficulty);
        out.writeObject(this.user);
        out.writeObject(this.subtheme1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.name = (String)in.readObject();
        this.text = (String)in.readObject();
        this.rightAnswer = (String)in.readObject();
        this.explanation = (String)in.readObject();
        this.solutions = in.readObject();
        this.image = in.readObject();
        this.image1 = in.readObject();
        this.difficulty = in.readObject();
        this.user = in.readObject();
        this.subtheme1 = in.readObject();
    }

}
