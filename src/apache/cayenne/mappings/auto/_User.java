package apache.cayenne.mappings.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import apache.cayenne.mappings.Role;
import apache.cayenne.mappings.Solution;
import apache.cayenne.mappings.Task;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> LOGIN = Property.create("login", String.class);
    public static final Property<String> MIDDLE_NAME = Property.create("middleName", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Double> RATING = Property.create("rating", Double.class);
    public static final Property<String> SALT = Property.create("salt", String.class);
    public static final Property<Role> ROLE = Property.create("role", Role.class);
    public static final Property<List<Solution>> SOLUTIONS = Property.create("solutions", List.class);
    public static final Property<List<Task>> TASKS = Property.create("tasks", List.class);

    protected String firstName;
    protected String lastName;
    protected String login;
    protected String middleName;
    protected String password;
    protected Double rating;
    protected String salt;

    protected Object role;
    protected Object solutions;
    protected Object tasks;

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setLogin(String login) {
        beforePropertyWrite("login", this.login, login);
        this.login = login;
    }

    public String getLogin() {
        beforePropertyRead("login");
        return this.login;
    }

    public void setMiddleName(String middleName) {
        beforePropertyWrite("middleName", this.middleName, middleName);
        this.middleName = middleName;
    }

    public String getMiddleName() {
        beforePropertyRead("middleName");
        return this.middleName;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setRating(double rating) {
        beforePropertyWrite("rating", this.rating, rating);
        this.rating = rating;
    }

    public double getRating() {
        beforePropertyRead("rating");
        if(this.rating == null) {
            return 0;
        }
        return this.rating;
    }

    public void setSalt(String salt) {
        beforePropertyWrite("salt", this.salt, salt);
        this.salt = salt;
    }

    public String getSalt() {
        beforePropertyRead("salt");
        return this.salt;
    }

    public void setRole(Role role) {
        setToOneTarget("role", role, true);
    }

    public Role getRole() {
        return (Role)readProperty("role");
    }

    public void addToSolutions(Solution obj) {
        addToManyTarget("solutions", obj, true);
    }

    public void removeFromSolutions(Solution obj) {
        removeToManyTarget("solutions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Solution> getSolutions() {
        return (List<Solution>)readProperty("solutions");
    }

    public void addToTasks(Task obj) {
        addToManyTarget("tasks", obj, true);
    }

    public void removeFromTasks(Task obj) {
        removeToManyTarget("tasks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Task> getTasks() {
        return (List<Task>)readProperty("tasks");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "firstName":
                return this.firstName;
            case "lastName":
                return this.lastName;
            case "login":
                return this.login;
            case "middleName":
                return this.middleName;
            case "password":
                return this.password;
            case "rating":
                return this.rating;
            case "salt":
                return this.salt;
            case "role":
                return this.role;
            case "solutions":
                return this.solutions;
            case "tasks":
                return this.tasks;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "firstName":
                this.firstName = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "login":
                this.login = (String)val;
                break;
            case "middleName":
                this.middleName = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "rating":
                this.rating = (Double)val;
                break;
            case "salt":
                this.salt = (String)val;
                break;
            case "role":
                this.role = val;
                break;
            case "solutions":
                this.solutions = val;
                break;
            case "tasks":
                this.tasks = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.firstName);
        out.writeObject(this.lastName);
        out.writeObject(this.login);
        out.writeObject(this.middleName);
        out.writeObject(this.password);
        out.writeObject(this.rating);
        out.writeObject(this.salt);
        out.writeObject(this.role);
        out.writeObject(this.solutions);
        out.writeObject(this.tasks);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.firstName = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.login = (String)in.readObject();
        this.middleName = (String)in.readObject();
        this.password = (String)in.readObject();
        this.rating = (Double)in.readObject();
        this.salt = (String)in.readObject();
        this.role = in.readObject();
        this.solutions = in.readObject();
        this.tasks = in.readObject();
    }

}
